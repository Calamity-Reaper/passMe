import { ContainerModule, interfaces } from 'inversify';
import { App } from './app';
import { DITypes } from './DITypes';
import { IConfigService } from './config/config.service.interface';
import { ConfigService } from './config/config.service';
import { LoggerService } from './logger/logger.service';
import { ILoggerService } from './logger/logger.service.interface';
import { ExceptionFilter } from './errors/exception.filter';
import { IExceptionFilter } from './errors/exception.filter.interface';
import { UsersController } from './users/users.controller';
import { IUsersController } from './users/interfaces/users.controller.interface';
import { UsersService } from './users/users.service';
import { IUsersService } from './users/interfaces/users.service.interface';
import { PrismaService } from './database/prisma.service';
import { UsersRepository } from './users/repository/users.repository';
import { IUsersRepository } from './users/repository/users.repository.interface';
import { ITokenRepository } from './auth/repository/token.repository.interface';
import { TokenRepository } from './auth/repository/token.repository';
import { IAuthService } from './auth/interfaces/auth.service.interface';
import { AuthService } from './auth/auth.service';
import { AuthController } from './auth/auth.controller';
import { IAuthController } from './auth/interfaces/auth.controller.interface';

export const appBindings = new ContainerModule((bind: interfaces.Bind) => {
	bind<App>(DITypes.Application).to(App).inSingletonScope();
	bind<IConfigService>(DITypes.ConfigService).to(ConfigService).inSingletonScope();
	bind<ILoggerService>(DITypes.LoggerService).to(LoggerService).inSingletonScope();
	bind<IExceptionFilter>(DITypes.ExceptionFilter).to(ExceptionFilter).inSingletonScope();
	bind<IUsersController>(DITypes.UsersController).to(UsersController).inSingletonScope();
	bind<IUsersService>(DITypes.UsersService).to(UsersService).inSingletonScope();
	bind<PrismaService>(DITypes.PrismaService).to(PrismaService).inSingletonScope();
	bind<IUsersRepository>(DITypes.UsersRepository).to(UsersRepository).inSingletonScope();
	bind<ITokenRepository>(DITypes.TokenRepository).to(TokenRepository).inSingletonScope();
	bind<IAuthService>(DITypes.AuthService).to(AuthService).inSingletonScope();
	bind<IAuthController>(DITypes.AuthController).to(AuthController).inSingletonScope();
});
